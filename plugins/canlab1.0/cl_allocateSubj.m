% Allocates array of structures for the appropriate analysis.
% 
% Usage:
%   >> subj = cl_allocateSubj('analysisType', numSubjects, numChannels, sampleFreq);
% Example:
%   >> subj = cl_allocateSubj('cl_alpha3alpha2', 50, 53, 512);
% 
% Inputs:
%   analysisType: Either 'cl_alpha3alpha2' or 'cl_alphatheta'
%   numSubjects:  Number of subjects. Supposing the allocated
%                 object is subj, each subject can then be
%                 accessed as such: subj(1), subj(2),...
%   numChannels:  Number of channels in each subject.
%   sampleFreq:   Sampling frequency that EEG is in.
% 
% Outputs:
%   subjectArray: Array of structures, with each structure representing a
%                 single subject.

function subjectArray = cl_allocateSubj(analysisType, numSubjects, numChannels, sampleFreq)

subjectArray(numSubjects) = struct();
if strcmp(analysisType, 'cl_alpha3alpha2')
    subjectArray(:) = struct('SubjectID', 'SXXX',...
        'IAF', 0.0,... % These are found by first finding the IAF and
        'TF', 0.0,...  % TF of every channel, and then averaging them
        'ratio_Alpha32', 0.0,...
        'ratio_Alpha32Fixed', 0.0,...
        'ratio_AlphaTheta', 0.0,...
        'ratio_AlphaThetaFixed', 0.0,...
        'IAFs', zeros(1, numChannels),...
        'TFs',  zeros(1, numChannels),...
        'avgPSD', zeros(1, 513),...
        'avgFreqs', zeros(513, 1),...
        'rejectedIAFs', [],...
        'rejectedTFs',  [],...
        'inspectedIAFs', zeros(1, numChannels),...
        'inspectedTFs',  zeros(1, numChannels),...
        'deltaFloor', 0.0,...
        'deltaCeiling', 0.0,...
        'thetaFloor', 0.0,...
        'thetaCeiling', 0.0,...
        'alphaFloor', 0.0,...
        'alpha1Floor', 0.0,...
        'alpha1Ceiling', 0.0,...
        'alpha2Floor', 0.0,...
        'alpha2Ceiling', 0.0,...
        'alpha3Floor', 0.0,...
        'alpha3Ceiling', 0.0,...
        'betaFloor', 0.0,...
        'betaCeiling', 0.0,...
        'gammaFloor', 0.0,...
        'gammaCeiling', 0.0,...
        'deltaFloor_fixed',    0.5,...
        'deltaCeiling_fixed',  4,...
        'thetaFloor_fixed',    4,...
        'thetaCeiling_fixed',  8,...
        'alphaFloor_fixed',    8,...
        'alpha1Floor_fixed',   8,...
        'alpha1Ceiling_fixed', 9.25,...
        'alpha2Floor_fixed',   9.25,...
        'alpha2Ceiling_fixed', 10.5,...
        'alpha3Floor_fixed',   10.5,...
        'alpha3Ceiling_fixed', 13,...
        'alphaCeiling_fixed',  13,...
        'betaFloor_fixed',     13,...
        'betaCeiling_fixed',   30,...
        'gammaFloor_fixed',    30,...
        'gammaCeiling_fixed',  45,...
        'deltaPower', 0.0,...
        'thetaPower', 0.0,...
        'alphaPower', 0.0,...
        'alpha1Power', 0.0,...
        'alpha2Power', 0.0,...
        'alpha3Power', 0.0,...
        'betaPower', 0.0,...
        'gammaPower', 0.0,...
        'deltaPower_fixed', 0.0,...
        'thetaPower_fixed', 0.0,...
        'alphaPower_fixed', 0.0,...
        'alpha1Power_fixed', 0.0,...
        'alpha2Power_fixed', 0.0,...
        'alpha3Power_fixed', 0.0,...
        'betaPower_fixed', 0.0,...
        'gammaPower_fixed', 0.0);
elseif strcmp(analysisType, 'cl_alphatheta')
    subjectArray(:) = struct('SubjectID', 'SXXX',...
        'avgC3Signal', zeros(1, 10240),...
        'avgO1Signal', zeros(1, 10240),...
        'C3IAF', 0.0,... % These will store the IAF and TF for the 
        'C3TF', 0.0,...  % C3 and O1 electrodes, which we'll obtain
        'O1IAF', 0.0,... % by grand average of electrodes in that
        'O1TF', 0.0,...  % area
        'C3_AlphaThetaRatio', 0.0,...
        'O1_AlphaThetaRatio', 0.0,...
        'C3_AlphaThetaRatio_fixed', 0.0,...
        'O1_AlphaThetaRatio_fixed', 0.0,...
        'misc', struct('C3Added', 1, 'O1Added', 1,...
                    'rejectedIAFs', [],...
                    'rejectedTFs', [],...
                    'inspectedIAFs', zeros(1, size(Signal,2)),...
                    'inspectedTFs', zeros(1, size(Signal,2)),...
                    'samplingFreq', SignalInfo.original_sample_frequency,...
                    'measure', NaN),...
        'C3deltaFloor', 0.0,...
        'C3deltaCeiling', 0.0,...
        'C3thetaFloor', 0.0,...
        'C3thetaCeiling', 0.0,...
        'C3alphaFloor', 0.0,...
        'C3alpha1Floor', 0.0,...
        'C3alpha1Ceiling', 0.0,...
        'C3alpha2Floor', 0.0,...
        'C3alpha2Ceiling', 0.0,...
        'C3alpha3Floor', 0.0,...
        'C3alpha3Ceiling', 0.0,...
        'C3alphaCeiling', 0.0,...
        'C3betaFloor', 0.0,...
        'C3betaCeiling', 0.0,...
        'C3gammaFloor', 0.0,...
        'C3gammaCeiling', 0.0,...
        'O1deltaFloor', 0.0,...
        'O1deltaCeiling', 0.0,...
        'O1thetaFloor', 0.0,...
        'O1thetaCeiling', 0.0,...
        'O1alphaFloor', 0.0,...
        'O1alpha1Floor', 0.0,...
        'O1alpha1Ceiling', 0.0,...
        'O1alpha2Floor', 0.0,...
        'O1alpha2Ceiling', 0.0,...
        'O1alpha3Floor', 0.0,...
        'O1alpha3Ceiling', 0.0,...
        'O1alphaCeiling', 0.0,...
        'O1betaFloor', 0.0,...
        'O1betaCeiling', 0.0,...
        'O1gammaFloor', 0.0,...
        'O1gammaCeiling', 0.0,...
        'deltaFloor_fixed',    0.5,...     
        'deltaCeiling_fixed',  4,...     
        'thetaFloor_fixed',    4,... 
        'thetaCeiling_fixed',  8,... 
        'alphaFloor_fixed',    8,... 
        'alpha1Floor_fixed',   8,... 
        'alpha1Ceiling_fixed', 9.25,... 
        'alpha2Floor_fixed',   9.25,... 
        'alpha2Ceiling_fixed', 10.5,...
        'alpha3Floor_fixed',   10.5,...
        'alpha3Ceiling_fixed', 13,... 
        'alphaCeiling_fixed',  13,...     
        'betaFloor_fixed',     13,...
        'betaCeiling_fixed',   30,...
        'gammaFloor_fixed',    30,...
        'gammaCeiling_fixed',  45,...
        'C3deltaPower', 0.0,...
        'C3thetaPower', 0.0,...
        'C3alphaPower', 0.0,...
        'C3alpha1Power', 0.0,...
        'C3alpha2Power', 0.0,...
        'C3alpha3Power', 0.0,...
        'C3betaPower', 0.0,...
        'C3gammaPower', 0.0,...
        'O1deltaPower', 0.0,...
        'O1thetaPower', 0.0,...
        'O1alphaPower', 0.0,...
        'O1alpha1Power', 0.0,...
        'O1alpha2Power', 0.0,...
        'O1alpha3Power', 0.0,...
        'O1betaPower', 0.0,...
        'O1gammaPower', 0.0,...
        'O1deltaPower_fixed', 0.0,...
        'O1thetaPower_fixed', 0.0,...
        'O1alphaPower_fixed', 0.0,...
        'O1alpha1Power_fixed', 0.0,...
        'O1alpha2Power_fixed', 0.0,...
        'O1alpha3Power_fixed', 0.0,...
        'O1betaPower_fixed', 0.0,...
        'O1gammaPower_fixed', 0.0,...
        'C3deltaPower_fixed', 0.0,...
        'C3thetaPower_fixed', 0.0,...
        'C3alphaPower_fixed', 0.0,...
        'C3alpha1Power_fixed', 0.0,...
        'C3alpha2Power_fixed', 0.0,...
        'C3alpha3Power_fixed', 0.0,...
        'C3betaPower_fixed', 0.0,...
        'C3gammaPower_fixed', 0.0);
    for i = 1:numel(files)
        for j = 1:numel(C3trodes)
            subj(i).C3(j) = struct('Signal', zeros(10240, 1), 'IAF', 0.0, 'TF', 0.0);
        end
        for k = 1:numel(O1trodes)
            subj(i).O1(k) = struct('Signal', zeros(10240, 1), 'IAF', 0.0, 'TF', 0.0);
        end
    end
end
